import os

from duckietown_utils import logger
from duckietown_utils.constants import get_list_of_packages_in_catkin_ws

from .configuration import EasyNodeConfig
from .configuration import PROCESS_THREADED
from .configuration import load_configuration_for_nodes_in_package


def generate_easy_node_docs():
    skip = ['easier_node']
    packages = get_list_of_packages_in_catkin_ws()
    logger.info('Looking in %d packages for nodes.' % len(packages))

    for package_name, package_dir in packages.items():
        configs = load_configuration_for_nodes_in_package(package_name)
        for node_name, config in configs.items():
            if node_name in skip: continue
            out = os.path.join(package_dir, node_name + '-easy_node-autogenerated.md')

            md = "<div id='%s-%s-autogenerated' markdown='1'>\n\n" %  (package_name, node_name)
            md += '\n<!-- do not edit this file, autogenerated -->\n\n'
            md += generate_configuration(config)
            md += '\n\n</div>'
            md += """
<style>
.box {
    display: block;
}
.box + .box {
 margin-top: 2em;
}
</style>

    """
            # Do not touch the file if it has the same contents
            if os.path.exists(out):
                existing = open(out).read()
                need_write = existing != md
            else:
                need_write = True

            if need_write:
                with open(out, 'w') as f:
                    f.write(md)
                logger.info('Written %s' % out)
            else:
                logger.info('already up to date %s' % out)

def write_desc(x):
    return 'TODO: Missing description for entry "%s".' % x.name

# @contract(config=EasyNodeConfig)
def generate_configuration(config):
    assert isinstance(config, EasyNodeConfig)
    md = ""

    if config.parameters:
        md += '### Parameters \n\n'

    for param in config.parameters.values():
#         md += '<div class="box" markdown="1">\n\n'
        md += "**Parameter `%s`**: " % param.name
        md += describe_type(param.type)
        if param.has_default:
            md += '; default value: `%r`' % param.default
        md += '\n\n'
        if param.desc:
            md += param.desc
        else:
            md += write_desc(param)
            
        md += '\n\n'
#         md += '</div>\n\n'

    if config.subscriptions:
        md += '### Subscriptions \n\n'

    for subscription in config.subscriptions.values():
#         md += '<div class="box" markdown="1">\n'
        md += "**Subscription `%s`**: " % subscription.name
        md += 'topic `%s` (%s)\n\n' % (subscription.topic, describe_type(subscription.type))

        if subscription.desc:
            md += subscription.desc
        else:
            md += write_desc(subscription)

        md += '\n\n'

        if subscription.process == PROCESS_THREADED:
            md += 'Note: The data is processed *asynchronously* in a different thread.\n\n'



    if config.publishers:
        md += '### Published topics\n\n'

    for publisher in config.publishers.values():
#         md += '<div class="box" markdown="1">\n'
        md += "**Publisher `%s`**: " % publisher.name
        md += 'topic `%s` (%s)\n\n' % (publisher.topic, describe_type(publisher.type))
        if publisher.desc:
            md += publisher.desc
        else:
            md += write_desc(publisher)

        md += '\n\n'


    return md

def describe_type(x):
    if x is None:
        return 'not known'
    else:
        return '`%s`' % x.__name__
